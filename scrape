#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const util = require('util')
const mkdirp = require('mkdirp')
const axios = require('axios')
const cheerio = require('cheerio')

const readFile = util.promisify(fs.readFile)

const URLS_FILE = './urls.txt'

;(async () => {
    try {
        const urls = await readFile(URLS_FILE, 'utf8')
        await Promise.all(urls.trim().split('\n').map(doIt))
        console.log('All done')
    } catch (e) {
        console.error(e)
    }
})()

async function doIt(url) {
    const response = await axios(url)
    const data = extractData(response.data)
    const images = await downloadImages(data)
    console.log(`Finished downloading images for ${data.name}`)
    return images
}

function extractData(html) {
    const $ = cheerio.load(html)
    const imageUrls = $('.panel-image img').map((i, el) => {
        return $(el).attr('src')
    }).get()
    // Assume first image found is the cover image
    const coverImage = imageUrls[0]

    return {
        name: $('.new-product-page-name').text(),
        coverImage,
        imageUrls
    }
}

async function downloadImage(outputDir, url, cover=false) {
    const response = await axios({ url, responseType: 'stream' })
    const coverPrefix = cover ? 'cover-' : ''
    const filename = path.join(outputDir, coverPrefix + path.basename(url))
    return new Promise((resolve, reject) => {
        response.data
                .pipe(fs.createWriteStream(filename))
                .on('finish', () => resolve())
                .on('error', e => reject(e))
    })
}

async function downloadImages({ name, coverImage, imageUrls }) {
    const dir = `./output/${name}`
    await mkdirp(dir)
    return await Promise.all(
        imageUrls.map(url => downloadImage(dir, url, url === coverImage))
    )
}
